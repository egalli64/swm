services:
  # Service Discovery
  eureka-server:
    image: dockerized-microservices/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Configuration Server
  config-server:
    image: dockerized-microservices/config-server:latest
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Broker
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database for User Service
  postgres-user:
    image: postgres:17-alpine
    container_name: postgres-user
    environment:
      - POSTGRES_DB=userdb
      - POSTGRES_USER=userservice
      - POSTGRES_PASSWORD=userpass
    ports:
      - "5432:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U userservice -d userdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database for Product Service
  postgres-product:
    image: postgres:17-alpine
    container_name: postgres-product
    environment:
      - POSTGRES_DB=productdb
      - POSTGRES_USER=productservice
      - POSTGRES_PASSWORD=productpass
    ports:
      - "5433:5432"
    volumes:
      - postgres-product-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U productservice -d productdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Business Services
  user-service:
    image: dockerized-microservices/user-service:latest
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5432/userdb
      - SPRING_DATASOURCE_USERNAME=userservice
      - SPRING_DATASOURCE_PASSWORD=userpass
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=admin
      - SPRING_RABBITMQ_PASSWORD=admin
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres-user:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  product-service:
    image: dockerized-microservices/product-service:latest
    container_name: product-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-product:5432/productdb
      - SPRING_DATASOURCE_USERNAME=productservice
      - SPRING_DATASOURCE_PASSWORD=productpass
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=admin
      - SPRING_RABBITMQ_PASSWORD=admin
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres-product:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # API Gateway
  api-gateway:
    image: dockerized-microservices/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      user-service:
        condition: service_started
      product-service:
        condition: service_started

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres-user-data:
  postgres-product-data:
